from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.enums import ParseMode, ContentType
from keyboards import *
from database import *
from config import ADMIN_ID
from datetime import datetime
import pytz
import logging
router = Router()
logger = logging.getLogger(__name__)

# ========== –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ==========
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await main_menu(message.from_user.id),
        parse_mode=ParseMode.HTML
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    help_text += "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
    help_text += "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
    
    if message.from_user.id == ADMIN_ID:
        help_text += "\nüëë –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        help_text += "/block <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç\n"
        help_text += "/unblock <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç\n"
        help_text += "/blocked - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã\n"
    
    await message.answer(help_text)

# ========== –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ ==========
@router.callback_query(F.data == "week_appointments")
async def week_appointments(callback: CallbackQuery):
    await delete_expired_appointments()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=await days_keyboard()
    )

@router.callback_query(F.data.startswith("day_"))
async def select_day(callback: CallbackQuery):
    date = callback.data.split("_")[1]
    day_name = datetime.strptime(date, '%Y-%m-%d').strftime('%A')
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {day_name}:",
        reply_markup=await times_keyboard(date, day_name)
    )

@router.callback_query(F.data.startswith("appoint_"))
async def make_appointment(callback: CallbackQuery):
    user_id = callback.from_user.id
    existing = await get_user_appointment(user_id)
    if existing:
        await callback.answer(
            f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {existing[1]} –≤ {existing[2]}",
            show_alert=True
        )
        return
    
    _, date, time = callback.data.split('_')
    day_name = datetime.strptime(date, '%Y-%m-%d').strftime('%A')
    
    if not await is_slot_available(date, time):
        await callback.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!", show_alert=True)
        return
        
    await add_appointment(
        user_id=user_id,
        username=callback.from_user.username,
        full_name=callback.from_user.full_name,
        date=date,
        day=day_name,
        time=time
    )
    
    await callback.message.answer(
        f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:\n"
        f"üìÖ {day_name}, {date}\n"
        f"‚è∞ {time}\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        reply_markup=await main_menu(user_id)
    )
    
    if ADMIN_ID:
        await callback.bot.send_message(
            ADMIN_ID,
            f"üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n"
            f"üë§ {callback.from_user.full_name} (@{callback.from_user.username})\n"
            f"üìÖ {day_name}, {date}\n"
            f"‚è∞ {time}\n"
            f"üÜî {user_id}"
        )
    
    await callback.message.edit_reply_markup(
        reply_markup=await times_keyboard(date, day_name)
    )

# ========== –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ ==========
@router.message(Command("cancel"))
@router.callback_query(F.data == "cancel_booking")
async def cancel_booking(update: Message | CallbackQuery):
    user_id = update.from_user.id
    if isinstance(update, CallbackQuery):
        message = update.message
        await update.answer()
    else:
        message = update
    
    appointment = await get_user_appointment(user_id)
    if not appointment:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return
    
    await cancel_appointment(user_id)
    await message.answer(
        f"‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ {appointment[1]} –≤ {appointment[2]} –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=await main_menu(user_id)
    )
    
    if ADMIN_ID:
        await message.bot.send_message(
            ADMIN_ID,
            f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏:\n"
            f"üë§ {update.from_user.full_name}\n"
            f"üÜî {user_id}"
        )

# ========== –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ==========
@router.message(Command("block"))
async def block_slot_command(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è> [–ø—Ä–∏—á–∏–Ω–∞]\n–ü—Ä–∏–º–µ—Ä: /block 2023-12-25 15:00 –ü—Ä–∞–∑–¥–Ω–∏–∫")
        return
    
    args = command.args.split()
    if len(args) < 2:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è")
        return
    
    date, time = args[0], args[1]
    reason = " ".join(args[2:]) if len(args) > 2 else None
    
    try:
        datetime.strptime(date, '%Y-%m-%d')
        datetime.strptime(time, '%H:%M')
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD –∏ HH:MM")
        return
    
    await block_slot(date, time, message.from_user.id, reason)
    await message.answer(f"‚úÖ –°–ª–æ—Ç {date} {time} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}")

@router.message(Command("unblock"))
async def unblock_slot_command(message: Message, command: CommandObject):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <–¥–∞—Ç–∞> <–≤—Ä–µ–º—è>\n–ü—Ä–∏–º–µ—Ä: /unblock 2023-12-25 15:00")
        return
    
    args = command.args.split()
    if len(args) < 2:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è")
        return
    
    date, time = args[0], args[1]
    
    await unblock_slot(date, time)
    await message.answer(f"‚úÖ –°–ª–æ—Ç {date} {time} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

@router.message(Command("blocked"))
async def list_blocked_slots(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    slots = await get_blocked_slots()
    if not slots:
        await message.answer("–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        return
    
    text = "üõë –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:\n\n"
    for slot in slots:
        text += f"üìÖ {slot[0]} ‚è∞ {slot[1]}\n"
        text += f"–ü—Ä–∏—á–∏–Ω–∞: {slot[2] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {slot[3]}\n\n"
    
    await message.answer(text)

# ========== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ==========
@router.callback_query(F.data == "about_me")
async def about_me(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–û–±–æ –º–Ω–µ:</b>\n\n"
        "–ú–æ–π —Ç–∞–ø–ª–∏–Ω–∫ https://taplink.cc/psereality\n\n"
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @psy_birdy",
        parse_mode=ParseMode.HTML,
        reply_markup=back_to_main()
    )

@router.callback_query(F.data == "support_author")
async def support_author(callback: CallbackQuery):
    await callback.message.edit_text(
        "üíñ <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞:</b>\n\n"
        "–∫–∞—Ä—Ç–∞ —Å–±–µ—Ä: <code>2202202345909851</code>\n",
        parse_mode=ParseMode.HTML,
        reply_markup=back_to_main()
    )

# ========== –ù–∞–≤–∏–≥–∞—Ü–∏—è ==========
@router.callback_query(F.data == "back_to_main")
async def back_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=await main_menu(callback.from_user.id)
    )

@router.callback_query(F.data == "back_to_days")
async def back_days(callback: CallbackQuery):
    await delete_expired_appointments()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=await days_keyboard()
    )

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ==========
@router.callback_query(F.data == "unavailable")
async def unavailable(callback: CallbackQuery):
    await callback.answer("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!", show_alert=True)

@router.callback_query(F.data == "no_slots")
async def no_slots(callback: CallbackQuery):
    await callback.answer("üò¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å", show_alert=True)

@router.callback_query()
async def unknown_callback(callback: CallbackQuery):
    await callback.answer("‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –û–±–Ω–æ–≤–∏—Ç–µ –º–µ–Ω—é /start")

@router.message()
async def unknown_message(message: Message):
    await message.answer(
        "‚ö†Ô∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start",
        reply_markup=await main_menu(message.from_user.id)
    )