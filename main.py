import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from config import BOT_TOKEN, ADMIN_ID
from handlers import router
from database import init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

async def on_startup(bot: Bot):
    bot_info = await bot.get_me()
    logger.info(f"–ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—â–µ–Ω!")
    print(f"‚úÖ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print(f"üÜî ID: {bot_info.id}")
    print(f"üëã –ò–º—è: {bot_info.first_name}")
    if ADMIN_ID:
        await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def main():
    try:
        await init_db()
        
        bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        dp = Dispatcher()
        dp.include_router(router)
        
        dp.startup.register(on_startup)
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        if 'bot' in locals():
            await bot.session.close()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    asyncio.run(main())