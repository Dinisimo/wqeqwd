from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import pytz
from config import TIMEZONE
from database import is_slot_available

def get_week_days():
    tz = pytz.timezone(TIMEZONE)
    today = datetime.now(tz)
    current_weekday = today.weekday()  # 0-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    
    days = []
    day_names = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏–ª–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    start_date = today - timedelta(days=current_weekday)
    
    for i in range(6):  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–°—É–±–±–æ—Ç–∞
        day_date = (start_date + timedelta(days=i)).strftime('%Y-%m-%d')
        day_name = day_names[i]
        
        # –ï—Å–ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
        if i == current_weekday:
            day_name += " (—Å–µ–≥–æ–¥–Ω—è)"
        # –ï—Å–ª–∏ –¥–µ–Ω—å –ø—Ä–æ—à–µ–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        elif (start_date + timedelta(days=i)).date() < today.date():
            continue
            
        days.append({
            "name": day_name,
            "date": day_date
        })
    
    return days

async def main_menu(user_id: int):
    from database import get_user_appointment
    has_appointment = await get_user_appointment(user_id)
    buttons = [
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ –Ω–µ–¥–µ–ª–µ", callback_data="week_appointments")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û–±–æ –º–Ω–µ", callback_data="about_me")],
        [InlineKeyboardButton(text="üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="support_author")]
    ]
    if has_appointment:
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def days_keyboard():
    days = get_week_days()
    keyboard = []
    for day in days:
        keyboard.append([InlineKeyboardButton(
            text=day["name"], 
            callback_data=f"day_{day['date']}"
        )])
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def times_keyboard(date: str, day_name: str):
    times = ["13:00", "15:00", "17:00", "19:00"]
    keyboard = []
    
    for time in times:
        is_available = await is_slot_available(date, time)
        if is_available:
            text = f"{time} ‚úÖ"
            callback = f"appoint_{date}_{time}"
            keyboard.append([InlineKeyboardButton(text=text, callback_data=callback)])
    
    if not keyboard:
        keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤", callback_data="no_slots")])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_days"),
        InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def back_to_main():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")]
    ])